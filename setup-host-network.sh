#!/bin/bash

# GhostBridge Proxmox Host Network Setup Script
# Creates OVS bridges with dummy Netmaker interfaces for mesh integration
# Based on NETWORK_TOPOLOGY_MAPPING.md

set -euo pipefail

# Enable debug mode
set -x

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration variables
PUBLIC_IP="80.209.240.244"
PUBLIC_GATEWAY="80.209.240.129"
PRIVATE_IP="10.0.0.1"
# SECOND_PUBLIC_IP="80.209.242.196"  # Container handles this directly
DNS_SERVERS="8.8.8.8 8.8.4.4"
PHYSICAL_INTERFACE="eth0"

echo "=== VARIABLES SET ==="
echo "PUBLIC_IP: $PUBLIC_IP"
echo "PHYSICAL_INTERFACE: $PHYSICAL_INTERFACE"

# Logging function
log() {
    echo -e "${GREEN}[LOG]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root"
    fi
}

# Install required packages
install_packages() {
    log "Installing required packages..."
    apt-get update
    apt-get install -y openvswitch-switch bridge-utils net-tools iproute2
    systemctl enable openvswitch-switch
    systemctl start openvswitch-switch
}

# Backup current network configuration
backup_config() {
    log "Backing up current network configuration..."
    cp /etc/network/interfaces /etc/network/interfaces.backup.$(date +%Y%m%d_%H%M%S)
    log "Backup created: /etc/network/interfaces.backup.$(date +%Y%m%d_%H%M%S)"
}

# Skip manual OVS setup - let ifup handle everything
setup_ovs_network() {
    log "Skipping manual OVS setup - ifup will handle bridge creation"
    
    # Only enable IP forwarding here
    echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
    sysctl -p
    
    log "Network will be configured by ifup after interfaces file is written"
}

# Create persistent network configuration
create_network_config() {
    log "Creating persistent network configuration..."
    
    cat > /etc/network/interfaces << EOF
# GhostBridge Network Configuration
# Generated by setup-host-network.sh
# Following Debian OVS best practices with allow-ovs

# Loopback interface
auto lo
iface lo inet loopback

# Physical interface - no IP (managed by OVS)
allow-ovs ${PHYSICAL_INTERFACE}
iface ${PHYSICAL_INTERFACE} inet manual
    ovs_bridge ovsbr0
    ovs_type OVSPort

# Main OVS Bridge - bring up first
allow-ovs ovsbr0
iface ovsbr0 inet manual
    ovs_type OVSBridge
    ovs_ports ${PHYSICAL_INTERFACE} ovsbr0-public ovsbr0-private
    pre-up /sbin/modprobe openvswitch
    up /usr/bin/ovs-vsctl --may-exist add-br ovsbr0
    up /usr/bin/ovs-vsctl --may-exist add-port ovsbr0 ${PHYSICAL_INTERFACE}
    up /usr/bin/ovs-vsctl --may-exist add-port ovsbr0 ovsbr0-public -- set interface ovsbr0-public type=internal
    up /usr/bin/ovs-vsctl --may-exist add-port ovsbr0 ovsbr0-private -- set interface ovsbr0-private type=internal
    down /usr/bin/ovs-vsctl --if-exists del-port ovsbr0 ${PHYSICAL_INTERFACE}
    down /usr/bin/ovs-vsctl --if-exists del-port ovsbr0 ovsbr0-public
    down /usr/bin/ovs-vsctl --if-exists del-port ovsbr0 ovsbr0-private
    post-down /usr/bin/ovs-vsctl --if-exists del-br ovsbr0

# Public/Management interface (Primary) - depends on bridge
allow-ovs ovsbr0-public
iface ovsbr0-public inet static
    address ${PUBLIC_IP}/25
    gateway ${PUBLIC_GATEWAY}
    dns-nameservers ${DNS_SERVERS}
    ovs_type OVSIntPort
    ovs_bridge ovsbr0
    ovs_options tag=100
    pre-up /sbin/ifconfig ovsbr0 up
    post-up /sbin/route add -net 0.0.0.0/0 gw ${PUBLIC_GATEWAY} dev ovsbr0-public || true

# Private/Container gateway - depends on bridge  
allow-ovs ovsbr0-private
iface ovsbr0-private inet static
    address ${PRIVATE_IP}/24
    ovs_type OVSIntPort
    ovs_bridge ovsbr0
    ovs_options tag=200
    pre-up /sbin/ifconfig ovsbr0 up

# Netmaker Management Bridge
allow-ovs ovsbr1
iface ovsbr1 inet manual
    ovs_type OVSBridge
    ovs_ports nm-mgmt nm-mesh
    up /usr/bin/ovs-vsctl --may-exist add-br ovsbr1
    up /usr/bin/ovs-vsctl --may-exist add-port ovsbr1 nm-mgmt -- set interface nm-mgmt type=internal
    up /usr/bin/ovs-vsctl --may-exist add-port ovsbr1 nm-mesh -- set interface nm-mesh type=internal
    down /usr/bin/ovs-vsctl --if-exists del-port ovsbr1 nm-mgmt
    down /usr/bin/ovs-vsctl --if-exists del-port ovsbr1 nm-mesh
    post-down /usr/bin/ovs-vsctl --if-exists del-br ovsbr1

# Dummy Netmaker management interface
allow-ovs nm-mgmt
iface nm-mgmt inet static
    address 10.88.88.10/24
    ovs_type OVSIntPort
    ovs_bridge ovsbr1
    pre-up /sbin/ifconfig ovsbr1 up

# Dummy Netmaker mesh interface
allow-ovs nm-mesh
iface nm-mesh inet static
    address 100.104.70.10/24
    ovs_type OVSIntPort
    ovs_bridge ovsbr1
    pre-up /sbin/ifconfig ovsbr1 up

# Auto-start OVS interfaces in proper order
auto ovsbr0 ovsbr0-public ovsbr0-private ovsbr1 nm-mgmt nm-mesh
EOF

    log "Network configuration written to /etc/network/interfaces"
    
    # Bring up the network interfaces using ifup
    log "Bringing up network interfaces with ifup..."
    ifup ovsbr0 || warn "Failed to bring up ovsbr0"
    ifup ovsbr0-public || warn "Failed to bring up ovsbr0-public" 
    ifup ovsbr0-private || warn "Failed to bring up ovsbr0-private"
    ifup ovsbr1 || warn "Failed to bring up ovsbr1"
    ifup nm-mgmt || warn "Failed to bring up nm-mgmt"
    ifup nm-mesh || warn "Failed to bring up nm-mesh"
}

# Configure iptables for NAT and forwarding
setup_iptables() {
    log "Configuring iptables for NAT and forwarding..."
    
    # Enable NAT for private network
    iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o ovsbr0-public -j MASQUERADE
    
    # Allow forwarding between interfaces
    iptables -A FORWARD -i ovsbr0-private -o ovsbr0-public -j ACCEPT
    iptables -A FORWARD -i ovsbr0-public -o ovsbr0-private -m state --state RELATED,ESTABLISHED -j ACCEPT
    
    # Container handles its own public IP routing
    
    # Allow Netmaker mesh traffic
    iptables -A FORWARD -i nm-mesh -j ACCEPT
    iptables -A FORWARD -o nm-mesh -j ACCEPT
    
    # Save iptables rules
    iptables-save > /etc/iptables/rules.v4 || {
        mkdir -p /etc/iptables
        iptables-save > /etc/iptables/rules.v4
    }
    
    # Install iptables-persistent to restore rules on boot
    DEBIAN_FRONTEND=noninteractive apt-get install -y iptables-persistent
}

# Show network status
show_status() {
    log "Network setup complete! Current status:"
    echo
    echo -e "${BLUE}=== OVS Bridges ===${NC}"
    ovs-vsctl show
    echo
    echo -e "${BLUE}=== IP Addresses ===${NC}"
    ip addr show | grep -E "(ovsbr|nm-)"
    echo
    echo -e "${BLUE}=== Routes ===${NC}"
    ip route show
    echo
    echo -e "${BLUE}=== Connectivity Test ===${NC}"
    echo "Testing connectivity to 8.8.8.8..."
    if ping -c 2 8.8.8.8 > /dev/null 2>&1; then
        echo -e "${GREEN}✓ Internet connectivity OK${NC}"
    else
        echo -e "${RED}✗ Internet connectivity FAILED${NC}"
    fi
}

# Cleanup function
cleanup() {
    if [[ $? -ne 0 ]]; then
        error "Script failed! Check logs and consider restoring from backup."
        echo "To restore: cp /etc/network/interfaces.backup.* /etc/network/interfaces"
    fi
}

# Main execution
echo "=== DEFINING MAIN FUNCTION ==="
main() {
    echo "=== STARTING GHOSTBRIDGE HOST SETUP ==="
    log "Starting GhostBridge Proxmox Host Network Setup..."
    
    echo "=== CHECKING ROOT ==="
    check_root
    
    # Set trap for cleanup
    trap cleanup EXIT
    
    echo "=== INSTALLING PACKAGES ==="
    install_packages
    
    echo "=== BACKING UP CONFIG ==="
    backup_config
    
    echo "=== SETTING UP OVS NETWORK ==="
    setup_ovs_network
    
    echo "=== CREATING NETWORK CONFIG ==="
    create_network_config
    
    echo "=== SETTING UP IPTABLES ==="
    setup_iptables
    
    echo "=== SHOWING STATUS ==="
    show_status
    
    echo "=== COMPLETED ==="
    log "Host network setup completed successfully!"
    warn "Reboot recommended to ensure all changes take effect"
    warn "After reboot, run setup-container-network.sh in the container"
}

# Run main function
echo "=== CALLING MAIN FUNCTION ==="
echo "About to call main with args: $@"

# Check if main function exists
if declare -f main > /dev/null; then
    echo "Main function exists, calling it..."
    main "$@"
    echo "Main function returned"
else
    echo "ERROR: Main function not defined!"
    exit 1
fi