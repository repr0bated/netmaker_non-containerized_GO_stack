#!/bin/bash

# Simple Network Reset Script
# Resets network to eth0 DHCP with empty Linux bridge for Proxmox

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[✓]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[⚠]${NC} $1"; }
print_error() { echo -e "${RED}[✗]${NC} $1"; }
print_info() { echo -e "${BLUE}[i]${NC} $1"; }

# Check root
if [[ $EUID -ne 0 ]]; then
    print_error "This script must be run as root"
    exit 1
fi

print_info "Simple Network Reset - Setting eth0 to DHCP with Linux bridge"

# Backup current config
print_info "Backing up current network configuration..."
cp /etc/network/interfaces /etc/network/interfaces.backup.$(date +%Y%m%d-%H%M%S)
print_status "Current config backed up"

# Remove all OVS bridges
print_info "Removing OVS bridges..."
if command -v ovs-vsctl >/dev/null 2>&1; then
    for bridge in $(ovs-vsctl list-br 2>/dev/null || echo ""); do
        if [[ -n "$bridge" ]]; then
            print_info "Removing OVS bridge: $bridge"
            ovs-vsctl del-br "$bridge" 2>/dev/null || true
        fi
    done
    print_status "OVS bridges removed"
else
    print_info "OVS not installed, skipping OVS cleanup"
fi

# Stop networking
print_info "Stopping networking services..."
systemctl stop networking 2>/dev/null || true
systemctl stop systemd-networkd 2>/dev/null || true

# Create simple interfaces file
print_info "Creating simple network configuration..."
cat > /etc/network/interfaces << 'EOF'
# Simple network configuration - eth0 DHCP with Linux bridge
# Generated by simple-network-reset.sh

source /etc/network/interfaces.d/*

# Loopback interface
auto lo
iface lo inet loopback

# Primary network interface - DHCP
auto eth0
iface eth0 inet dhcp

# Simple Linux bridge for containers
auto vmbr0
iface vmbr0 inet static
    address 10.0.0.1/24
    bridge_ports none
    bridge_stp off
    bridge_fd 0
    bridge_maxwait 0
    # Enable IP forwarding for containers
    post-up echo 1 > /proc/sys/net/ipv4/ip_forward
    post-up iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o eth0 -j MASQUERADE
    post-down iptables -t nat -D POSTROUTING -s 10.0.0.0/24 -o eth0 -j MASQUERADE
EOF

print_status "Network configuration created"

# Enable IP forwarding permanently
print_info "Enabling IP forwarding..."
echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/99-ip-forward.conf
sysctl -p /etc/sysctl.d/99-ip-forward.conf

# Install bridge utilities if needed
print_info "Installing bridge utilities..."
apt update -qq && apt install -y bridge-utils

# Create bridge interface if it doesn't exist
print_info "Setting up Linux bridge..."
if ! ip link show vmbr0 >/dev/null 2>&1; then
    ip link add name vmbr0 type bridge
    ip link set vmbr0 up
    print_status "Linux bridge vmbr0 created"
else
    print_status "Linux bridge vmbr0 already exists"
fi

# Restart networking
print_info "Restarting networking..."
systemctl restart networking

# Wait for network to come up
print_info "Waiting for network to stabilize..."
sleep 5

# Test connectivity
print_info "Testing network connectivity..."
if ping -c 2 8.8.8.8 >/dev/null 2>&1; then
    print_status "Internet connectivity confirmed"
else
    print_warning "Internet connectivity test failed (may need manual configuration)"
fi

# Show current configuration
print_info "Current network configuration:"
echo "--- Network Interfaces ---"
ip addr show | grep -E "^[0-9]+:|inet "
echo
echo "--- Bridge Status ---"
brctl show 2>/dev/null || echo "No bridges configured"
echo
echo "--- Routing Table ---"
ip route show

print_status "Network reset completed!"
print_info "Configuration:"
print_info "  • eth0: DHCP (primary internet connection)"
print_info "  • vmbr0: 10.0.0.1/24 (Linux bridge for containers)"
print_info "  • IP forwarding enabled"
print_info "  • NAT configured for container internet access"
print_info ""
print_info "You can now create containers using bridge=vmbr0"
print_info "Backup saved to: /etc/network/interfaces.backup.*"