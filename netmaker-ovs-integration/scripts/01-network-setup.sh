#!/bin/bash
# 01-network-setup.sh - Network Foundation Setup with ifup/ifdown integration
# Part of GhostBridge deployment sequence

set -euo pipefail

SCRIPT_VERSION="1.0.0"
LOG_FILE="/var/log/ghostbridge-network-setup.log"

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Utility functions
print_status() { echo -e "${GREEN}[✓]${NC} $1" | tee -a "$LOG_FILE"; }
print_warning() { echo -e "${YELLOW}[⚠]${NC} $1" | tee -a "$LOG_FILE"; }
print_error() { echo -e "${RED}[✗]${NC} $1" | tee -a "$LOG_FILE"; }
print_info() { echo -e "${BLUE}[i]${NC} $1" | tee -a "$LOG_FILE"; }
print_header() { echo -e "${CYAN}[NETWORK]${NC} $1" | tee -a "$LOG_FILE"; }
print_question() { echo -e "${CYAN}[?]${NC} $1"; }

# Ask user if they want to continue after failure
ask_continue() {
    local message="$1"
    print_warning "$message"
    print_question "Do you want to continue anyway? [y/N]: "
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        print_info "Script terminated by user"
        exit 1
    fi
    print_info "Continuing as requested..."
}

# Configuration
ENABLE_DUAL_IP="${ENABLE_DUAL_IP:-false}"
PUBLIC_IP_1="${PUBLIC_IP_1:-80.209.240.244}"
PUBLIC_IP_2="${PUBLIC_IP_2:-}"
PRIVATE_GATEWAY="${PRIVATE_GATEWAY:-10.0.0.1}"
BRIDGE_NAME="${BRIDGE_NAME:-ovsbr0}"

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        ask_continue "This script must be run as root"
    fi
}

# Install OVS if not present
install_ovs() {
    print_header "Installing OpenVSwitch"
    
    if ! command -v ovs-vsctl >/dev/null 2>&1; then
        print_info "Installing OpenVSwitch packages..."
        apt update
        apt install -y openvswitch-switch bridge-utils
        print_status "OpenVSwitch installed"
    else
        print_status "OpenVSwitch already installed"
    fi
    
    # Ensure OVS services are running
    systemctl enable openvswitch-switch
    systemctl start openvswitch-switch
    
    # Wait for OVS to be ready
    local timeout=30
    local count=0
    while ! ovs-vsctl show >/dev/null 2>&1 && [[ $count -lt $timeout ]]; do
        sleep 1
        ((count++))
    done
    
    if [[ $count -ge $timeout ]]; then
        print_error "OpenVSwitch failed to start within $timeout seconds"
        exit 1
    fi
    
    print_status "OpenVSwitch is running and ready"
}

# Create OVS bridge configuration
create_ovs_bridge() {
    print_header "Creating OVS Bridge Configuration"
    
    # Create bridge if it doesn't exist
    if ! ovs-vsctl br-exists "$BRIDGE_NAME"; then
        print_info "Creating OVS bridge: $BRIDGE_NAME"
        ovs-vsctl add-br "$BRIDGE_NAME"
        print_status "OVS bridge $BRIDGE_NAME created"
    else
        print_status "OVS bridge $BRIDGE_NAME already exists"
    fi
    
    # Add physical interface to bridge
    local physical_iface="eth0"
    if ip link show "$physical_iface" >/dev/null 2>&1; then
        if ! ovs-vsctl list-ports "$BRIDGE_NAME" | grep -q "^${physical_iface}$"; then
            print_info "Adding $physical_iface to $BRIDGE_NAME"
            ovs-vsctl add-port "$BRIDGE_NAME" "$physical_iface"
            print_status "Physical interface added to bridge"
        else
            print_status "Physical interface already in bridge"
        fi
    else
        print_warning "Physical interface $physical_iface not found"
    fi
}

# Create network interfaces configuration with ifup/ifdown hooks
create_interfaces_config() {
    print_header "Creating Network Interfaces Configuration"
    
    # Backup existing configuration
    if [[ -f /etc/network/interfaces ]]; then
        cp /etc/network/interfaces "/etc/network/interfaces.backup-$(date +%Y%m%d-%H%M%S)"
        print_info "Backed up existing interfaces configuration"
    fi
    
    # Create new interfaces configuration
    cat > /etc/network/interfaces << EOF
# GhostBridge Network Configuration
# Generated by network-setup.sh

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

# Physical interface - no IP, OVS port
auto eth0
iface eth0 inet manual
    ovs_bridge $BRIDGE_NAME
    ovs_type OVSPort
    # ifup hook to ensure OVS readiness
    pre-up /usr/local/bin/ghostbridge-network-wait.sh ovs-ready
    post-up /usr/local/bin/ghostbridge-network-wait.sh interface-ready eth0

# Main OVS Bridge
auto $BRIDGE_NAME
iface $BRIDGE_NAME inet manual
    ovs_type OVSBridge
    ovs_ports eth0 ${BRIDGE_NAME}-public ${BRIDGE_NAME}-private
    # Wait for bridge readiness before continuing
    post-up /usr/local/bin/ghostbridge-network-wait.sh bridge-ready $BRIDGE_NAME

# Public/Management interface
auto ${BRIDGE_NAME}-public
iface ${BRIDGE_NAME}-public inet static
    address $PUBLIC_IP_1/25
    # Gateway will be set by provider DHCP or manual config
    dns-nameservers 8.8.8.8 8.8.4.4
    ovs_type OVSIntPort
    ovs_bridge $BRIDGE_NAME
    # Network readiness checks
    post-up /usr/local/bin/ghostbridge-network-wait.sh connectivity-check
    post-up /usr/local/bin/ghostbridge-network-wait.sh dns-check

# Private/Container gateway
auto ${BRIDGE_NAME}-private
iface ${BRIDGE_NAME}-private inet static
    address $PRIVATE_GATEWAY/24
    ovs_type OVSIntPort
    ovs_bridge $BRIDGE_NAME
    # Ensure private network is ready for containers
    post-up /usr/local/bin/ghostbridge-network-wait.sh private-network-ready
EOF

    # Add dual IP configuration if enabled
    if [[ "$ENABLE_DUAL_IP" == "true" && -n "$PUBLIC_IP_2" ]]; then
        cat >> /etc/network/interfaces << EOF

# Second public interface for dual IP setup
auto ${BRIDGE_NAME}-public2
iface ${BRIDGE_NAME}-public2 inet static
    address $PUBLIC_IP_2/25
    ovs_type OVSIntPort
    ovs_bridge $BRIDGE_NAME
    # Dual IP readiness check
    post-up /usr/local/bin/ghostbridge-network-wait.sh dual-ip-ready
EOF
        print_status "Dual IP configuration added"
    fi
    
    print_status "Network interfaces configuration created"
}

# Create network wait/readiness script
create_network_wait_script() {
    print_header "Creating Network Readiness Script"
    
    cat > /usr/local/bin/ghostbridge-network-wait.sh << 'EOF'
#!/bin/bash
# GhostBridge Network Readiness Check Script
# Called by ifup hooks to ensure proper startup timing

set -euo pipefail

LOG_FILE="/var/log/ghostbridge-network-wait.log"
log() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $*" >> "$LOG_FILE"; }

check_type="$1"
interface="${2:-}"

case "$check_type" in
    "ovs-ready")
        log "Waiting for OpenVSwitch to be ready..."
        timeout=30
        count=0
        while ! ovs-vsctl show >/dev/null 2>&1 && [[ $count -lt $timeout ]]; do
            sleep 1
            ((count++))
        done
        if [[ $count -ge $timeout ]]; then
            log "ERROR: OpenVSwitch not ready after $timeout seconds"
            exit 1
        fi
        log "OpenVSwitch is ready"
        ;;
        
    "interface-ready")
        log "Waiting for interface $interface to be ready..."
        timeout=15
        count=0
        while ! ip link show "$interface" | grep -q "state UP" && [[ $count -lt $timeout ]]; do
            sleep 1
            ((count++))
        done
        if [[ $count -ge $timeout ]]; then
            log "WARNING: Interface $interface not ready after $timeout seconds"
        else
            log "Interface $interface is ready"
        fi
        ;;
        
    "bridge-ready")
        log "Waiting for OVS bridge $interface to be operational..."
        timeout=20
        count=0
        while ! ovs-vsctl br-exists "$interface" && [[ $count -lt $timeout ]]; do
            sleep 1
            ((count++))
        done
        if [[ $count -ge $timeout ]]; then
            log "ERROR: OVS bridge $interface not ready after $timeout seconds"
            exit 1
        fi
        # Additional check for bridge ports
        sleep 2
        log "OVS bridge $interface is ready"
        ;;
        
    "connectivity-check")
        log "Testing external connectivity..."
        if ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
            log "External connectivity confirmed"
        else
            log "WARNING: External connectivity test failed"
        fi
        ;;
        
    "dns-check")
        log "Testing DNS resolution..."
        if nslookup google.com >/dev/null 2>&1; then
            log "DNS resolution working"
        else
            log "WARNING: DNS resolution test failed"
        fi
        ;;
        
    "private-network-ready")
        log "Verifying private network readiness..."
        # Check if we can ping the private gateway
        sleep 2
        if ip route | grep -q "10.0.0.0/24"; then
            log "Private network route installed"
        else
            log "WARNING: Private network route not found"
        fi
        ;;
        
    "dual-ip-ready")
        log "Verifying dual IP configuration..."
        # Check if both public IPs are configured
        if ip addr | grep -q "80.209.240" && [[ $(ip addr | grep -c "80.209.240") -ge 2 ]]; then
            log "Dual IP configuration verified"
        else
            log "WARNING: Dual IP configuration incomplete"
        fi
        ;;
        
    *)
        log "Unknown check type: $check_type"
        exit 1
        ;;
esac

exit 0
EOF

    chmod +x /usr/local/bin/ghostbridge-network-wait.sh
    print_status "Network readiness script created"
}

# Test network configuration
test_network_config() {
    print_header "Testing Network Configuration"
    
    print_info "Testing interfaces configuration syntax..."
    # Test with ifquery -l (list interfaces) as syntax check alternative
    if ifquery -l >/dev/null 2>&1; then
        print_status "Interfaces syntax is valid"
    else
        print_warning "Could not validate interfaces syntax (ifquery version limitation)"
        print_info "Proceeding with configuration..."
    fi
    
    print_info "Verifying OVS bridge configuration..."
    if ovs-vsctl br-exists "$BRIDGE_NAME"; then
        print_status "OVS bridge exists and is accessible"
        
        # Show bridge configuration
        print_info "Bridge ports:"
        ovs-vsctl list-ports "$BRIDGE_NAME" | sed 's/^/    /'
    else
        print_error "OVS bridge verification failed"
        return 1
    fi
    
    print_status "Network configuration tests passed"
}

# Apply network configuration
apply_network_config() {
    print_header "Applying Network Configuration"
    
    print_warning "Network reconfiguration will briefly interrupt connectivity"
    read -p "Continue with network reconfiguration? [y/N]: " confirm
    
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        print_info "Network reconfiguration cancelled"
        return 0
    fi
    
    print_info "Reloading network configuration..."
    
    # Method 1: Try ifup/ifdown approach
    if command -v ifdown >/dev/null 2>&1 && command -v ifup >/dev/null 2>&1; then
        print_info "Using ifup/ifdown method..."
        
        # Bring down non-essential interfaces
        for iface in $(ip link show | grep -o '^[0-9]*: [^:]*' | cut -d' ' -f2 | grep -v -E '^(lo|eth0)$'); do
            ifdown "$iface" 2>/dev/null || true
        done
        
        # Bring up OVS bridge configuration
        ifup "$BRIDGE_NAME" || print_warning "Failed to bring up $BRIDGE_NAME"
        ifup "${BRIDGE_NAME}-public" || print_warning "Failed to bring up public interface"
        ifup "${BRIDGE_NAME}-private" || print_warning "Failed to bring up private interface"
        
        if [[ "$ENABLE_DUAL_IP" == "true" ]]; then
            ifup "${BRIDGE_NAME}-public2" || print_warning "Failed to bring up second public interface"
        fi
    else
        print_warning "ifup/ifdown not available, using manual method"
        
        # Manual interface configuration
        ip link set "$BRIDGE_NAME" up
        ip addr add "$PUBLIC_IP_1/25" dev "${BRIDGE_NAME}-public" 2>/dev/null || true
        ip addr add "$PRIVATE_GATEWAY/24" dev "${BRIDGE_NAME}-private" 2>/dev/null || true
    fi
    
    # Wait for network stabilization
    sleep 5
    
    print_status "Network configuration applied"
}

# Validate network setup
validate_network_setup() {
    print_header "Validating Network Setup"
    
    local validation_passed=true
    
    # Check OVS bridge
    if ovs-vsctl br-exists "$BRIDGE_NAME"; then
        print_status "✓ OVS bridge $BRIDGE_NAME exists"
    else
        print_error "✗ OVS bridge $BRIDGE_NAME missing"
        validation_passed=false
    fi
    
    # Check public interface
    if ip addr show "${BRIDGE_NAME}-public" | grep -q "$PUBLIC_IP_1"; then
        print_status "✓ Public interface configured"
    else
        print_error "✗ Public interface not configured"
        validation_passed=false
    fi
    
    # Check private interface
    if ip addr show "${BRIDGE_NAME}-private" | grep -q "$PRIVATE_GATEWAY"; then
        print_status "✓ Private interface configured"
    else
        print_error "✗ Private interface not configured"
        validation_passed=false
    fi
    
    # Test connectivity
    if ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
        print_status "✓ External connectivity working"
    else
        print_warning "⚠ External connectivity test failed"
    fi
    
    if [[ "$validation_passed" == "true" ]]; then
        print_status "✅ Network setup validation passed"
        return 0
    else
        print_error "❌ Network setup validation failed"
        return 1
    fi
}

# Main execution
main() {
    print_header "GhostBridge Network Setup - Phase 1"
    echo "════════════════════════════════════════════════════════════════════════"
    
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting network setup" >> "$LOG_FILE"
    
    check_root
    install_ovs
    create_ovs_bridge
    create_network_wait_script
    create_interfaces_config
    test_network_config
    apply_network_config
    validate_network_setup
    
    print_status "🎯 Network setup completed successfully!"
    print_info "Next step: Run 02-container-create.sh"
    
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Network setup completed" >> "$LOG_FILE"
}

main "$@"